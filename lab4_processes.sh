# полезная инфа по утилите top https://www.kryukov.biz/soderzhanie/protsessy/top/ 

#Просмотреть информацию об очередях сообщений,
# разделяемой памяти и семафорах можно командой ipcs.

#Команда ldd имя_программа показывает,
# какие общие библиотеки требуются для запуска динамически скомпонованной программы

#Настройка местонахождения общих библиотек производится с помощью
# конфигурационного файла /etc/ld.so.conf или conf файлов в /etc/ld.so.conf.d

#Команда ldconfig создает кэш, в котором хранится информация о всех библиотеках
# (/etc/ld.so.cache)

#Команда ldconfig -p выводит список библиотек, хранимый в кэше

#Альтернативный путь настройки путей до общих библиотек — перечислить
# каталоги в переменной LD_LIBRARY_PATH.

##МОНИТОРИНГ ПРОЦЕССОВ
# Команда ps (основные параметры):
# -e — все процессы
# -f — наиболее популярные атрибуты процессов
# -l — детальная информация о процессах
# -aux — все процессы, поля, показывающие относительную загрузку процессора и
# использование памяти
# -o поля — вывод, указанных атрибутов процессов
# Полноэкранная интерактивная утилита top
# Команда pstree — выводит иерархическое дерево процессов


#Содержимое /proc/<PID>:
#/proc/<PID>/status содержит множество полезной информации о процессе;
#example:
#cat /proc/4849/status
#/proc/<PID>/fd — символические ссылки для каждого открытого файла;
#/proc/<PID>/task — здесь содержатся каталоги, в которых размещена
#информация о потоках.

#Дополнительные параметры команды ps:
#-U, -u — процессы реального пользователя (владельца) и эффективного
#пользователя;
#-L — информация о потоках;
#-p PID — информация о процессе с указанным PID.

#Поля, которые можно указывать после параметра -o, можно получить в разделе
#«STANDARD FORMAT SPECIFIERS» справочной страницы по команде ps:
#man ps | grep -A 400 '^STANDARD FORMAT' | less

#Другие полезные утилиты для мониторинга процессов:

#pgrep регулярное_выражение - ps вместе с grep;

#pidof имя_программы — выводит PID процессов, запущенных программой;

#htop — аналог top, но более продвинутый. Позволяет осуществлять
#вертикальную и горизонтальную прокрутку.

#Утилита pstree объединяет идентичные ветви, помещая их в квадратные скобки и
#добавляя к ним целое число, представляющее число ветвей. Потоки процесса
#отображаются под родительским процессом и отображаются с использованием
#имени процесса в фигурных скобках.

#Задание 1
#   1.Посчитайте количество процессов, имеющих несколько потоков выполнения.
ps H | sort -k5 #вывод 
top -H
#   2.Запустите top и настройте вывод полей с информацией о процессе следующим образом:
#       удалите поля VIRT, RES, SHR;
#       добавьте поле RUSER и сделайте так, чтобы это поле было показано после поля USER;
top
#press 'f', выбираем стрелками нужный заголовок и нажимаем d, чтобы отобразить/убрать ('*' сигнализирует активное состояние)
#далее нажимаем стрелку вправо, чтобы перейти в режим ручной сортировки заголовков. Ставим RUSER после USER

#Задание 2
#   1.В другом терминальном окне выполните команду passwd и оставьте ее в состоянии запроса текущего пароля.
passwd
#   2.Перейдите в терминальное окно с top и выполните следующие действия: выведите все процессы, для которых реальным пользователем является пользователь,
#     которым Вы вошли в сеанс;
#     найдите процесс, запущенный командой passwd;
#     отправьте этому процессу сигналы 15 (SIGTERM), 2 (SIGINT), 3(SIGQUIT), 9(SIGKILL).
ps -a
top
#7036 root      20   0   12528   4392   3840 S   0,0   0,0   0:00.05 passwd 
#процесс принадлежит root
#press k
#enter PID
#enter signal
#repeat for each signal

#Задание 3
#   1.Выполните команду vim ~/file.txt и нажмите Ctrl-Z.
#   2.Выполните команду sleep 600, нажмите Ctrl-Z и выполните команду jobs.
jobs
#   [1]-  Остановлен    vim ~/file.txt  (рабочий каталог: /dev/shm)
#   [2]+  Остановлен    sleep 600
#   3.Последнее задание (sleep 600) сделайте фоновым.
bg "%sleep"
jobs
#[1]+  Остановлен    vim ~/file.txt  (рабочий каталог: /dev/shm)
#[2]-  Завершён        sleep 600

#Задание 4
#   1.Измените число NICE у задания (sleep 600), сделав его равным 10
sleep 600
#ctrl+Z
jobs -l #находим PID задания sleep 600
renice -n 10 9074 #9074 - is a PID
#   2.Проверьте, что число NICE у этого задания изменилось.
htop
#/home/alexander/Изображения/Снимки экрана/Снимок экрана от 2023-10-18 20-39-15.png

#Задание 5
#   1.Сделайте задание vim ~/file.txt активным и выйдите из редактора.
vg %"vim"
#   2.Отправьте сигнал 15 (SIGTERM) заданию sleep 600 и выполните команду jobs.
#   3.Создайте перехватчик сигналов SIGINT и SIGQUIT внутри командного интерпретатора, который выводит сообщение «Сигнал заблокирован».
#   (Используйте встроенную команду trap)

#Вопросы для проверки
#    1.Какой немаскируемый сигнал позволяет произвести аварийное завершение процесса?
#kill
#    2.Пользователь установил процессу значение NICE равное 10 Через некоторое время пользователь решил восстановить у процесса значение NICE по умолчанию (0) .
#      Как он это может сделать?
#renice -n 0 PID
#    3.Каким образом пользователь может запустить фоновое задание?
#bg <taskname>